#!/usr/bin/perl -w

use strict;
use Getopt::Std;
use Config::Simple;
use LWP::Simple;
use JSON::XS;
use File::Basename qw(dirname);
use File::HomeDir qw(home);
use File::Path qw(make_path);
use Log::Message::Simple qw(msg error debug carp croak cluck confess);
use Cwd qw(cwd abs_path);
use Git::Wrapper;
use Pod::Usage;

my $description = "A Small but Useful(tm) utility to maintain clones of Github repos you've created, starred or watched.";
my $license = qq{{

Copyright (C) 2014 Hugh Brown

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.
}};

my $version = "1.5";
my %option;
my $p_option;
my $verbose = 0;
my $offline = 0;
my $testing_only = 0;
my $data;
my $project;
my $user;
my $rcfile = ".landlerc";
my $rc;
my %cfg;
my $orig;
my @subdirs = qw(forks
		 mirrors
		 private
		 public
		 starred
		 watching);

sub setup_root {
	my $root = shift;
	(-d $root) or croak("Can't see repodir directory $root -- check config file.");
	debug("Setting up directories...", $verbose);
	foreach my $i (@subdirs) {
		next if -d "${root}/$i";
		make_path("${root}/$i", { verbose => $verbose,
					  mode    => 0755 });
	}
	debug("Done.", $verbose);
}

# FIXME: My variable names here are a mess.
# project: hash containing Github info about an individual repo.
# target_dir: which of public, forks, etc the repo should be put.
sub clone_or_pull {
	my $args = shift;
	my $project    = $args->{"project"};
	my $cfg        = $args->{"cfg"};
	my $target_dir = $args->{"target_dir"};
	debug("Project name: " . $project->{"name"});
	debug("Target dir: " . $cfg->{"landle.repodir"} . "/$target_dir", $verbose);
	chdir($cfg->{"landle.repodir"} . "/${target_dir}");
	my $git = Git::Wrapper->new($project->{"name"});
	if (-d $project->{"name"}) {
		debug("I can see directory " . $project->{"name"}, $verbose);
		debug("Assuming already cloned and need to update.", $verbose);
		# FIXME: Would git fetch be better?
		debug("cd " . $project->{"name"} . " && git pull origin master", $verbose);
		return if $testing_only;
		eval {
			$git->pull("origin");
		} or carp("Problem cloning " . $project->{"name"} . ": $@");
	} else {
		debug("Can't see directory " . $project->{"name"}, $verbose);
		debug("Assuming need to clone.", $verbose);
		my $clone = sprintf("git clone %s", $project->{"clone_url"});
		debug($clone, $verbose);
		# FIXME: This double check to see if we're in testing
		# mode seems...inelegant.
		if ($testing_only == 0) {
			eval {
				$git->clone($project->{"clone_url"});
			};
			if (defined $@) {
				carp("Problem cloning " . $project->{"name"} . ": $@");
				return ; # Skip the hook if there was a problem
			}
		}
		if (defined ($cfg->{"landle.post-clone-hook"})) {
			debug("cd $target_dir && " . $cfg->{"landle.post-clone-hook"} , $verbose);
			return if $testing_only;
			chdir($target_dir);
			system($cfg->{"landle.post-clone-hook"});
		}
	}
}

getopts('dvf:nhm', \%option);

if ($option{h}) {
	pod2usage(-verbose => 99,
		  -sections => "NAME|SYNOPSIS|LICENSE" );
}

if ($option{m}) {
	pod2usage(-verbose => 2);
}

if ($option{v}) {
	$verbose = 1;
	$Carp::Verbose = 1;
}

if ($option{n}) {
	$testing_only = 1;
}
if (defined $option{d}) {
	$offline = 1;
}

# FIXME: Might want to use Config::Simple to do this; maybe we can do
# try/finally with it.
if ($option{f}) {
	$rc = $option{f};
	debug("Using $rc as directed.", $verbose);
} else {
	push my @possible, sprintf("%s/.landlerc", cwd());
	push    @possible, sprintf("%s/.landlerc", home());
	SEARCH: foreach my $i (@possible) {
		if (-f $i) {
			debug("Found $i, so using that.", $verbose);
			$rc = $i;
			last SEARCH;
		}
	}
}
(defined $rc) or croak("Couldn't find a config file!  Read the manpage ('$0 -m').");
( -f $rc)     or croak("Can't see config file $rc! Read the manpage ('$0 -m').");

debug("Reading config file $rc...", $verbose);
eval {
	%cfg = new Config::Simple($rc)->vars();
	defined ($cfg{"landle.user"}) && defined ($cfg{"landle.repodir"});
} or croak("Bad config file $rc (bad syntax? empty?). Read the manpage ('$0 -m').");


debug("Username: " . $cfg{"landle.user"},    $verbose);
debug("Repodir: "  . $cfg{"landle.repodir"}, $verbose);

setup_root($cfg{"landle.repodir"});

# Arghh:  repos and starred are different.
# FIXME: This handling of the original directory is stupid.
if ($offline == 1) {
	local $/;
	open(my $fh, '<', 'user.repos.json') or croak("Can't open user.repos.json: $!");
	$orig = dirname(abs_path('user.repos.json'));
	debug("Found user.repos.json in $orig, so will look there for user.starred.json as well.", $verbose);
	my $json_text = <$fh>;
	$data = decode_json($json_text);
	close($fh);
} else {
	my $url = sprintf("https://api.github.com/users/%s/repos", $cfg{"landle.user"});
	debug("Fetching $url", $verbose);
	my $reply = get($url);
	if (defined $reply) {
		push(@$data, @{decode_json($reply)});
	} else {
		croak("Can't fetch $url -- maybe try the -d option?");
	}
}

foreach $project (@$data) {
	if ($project->{"fork"} == 1) {
		clone_or_pull({ project	   => $project,
				cfg	   => \%cfg,
				target_dir => "forks"});
	} elsif ($project->{"private"} == 1) {
		clone_or_pull({ project	   => $project,
				cfg	   => \%cfg,
				target_dir => "private"});
	} else {
		clone_or_pull({ project	   => $project,
				cfg	   => \%cfg,
				target_dir => "public"});
	}
}

# And now starred.
if ($offline == 1) {
	chdir($orig);
	local $/;
	open(my $fh, '<', 'user.starred.json') or croak("Can't open user.starred.json: $!");
	my $json_text = <$fh>;
	$data = decode_json($json_text);
} else {
	my $url = sprintf("https://api.github.com/users/%s/starred", $cfg{"landle.user"});
	debug("Fetching $url", $verbose);
	my $reply = get($url);
	# debug("\$reply = |$reply|", $verbose);
	$data = decode_json($reply);
}

foreach $project (@$data) {
	clone_or_pull({ project	     => $project,
			  cfg	     => \%cfg,
			  target_dir => "starred"});
}

__END__

=head1 NAME

B<landle> - A Small but Useful(tm) utility to maintain clones of Github repos you've created, starred or watched.

=head1 SYNOPSIS

landle [options]

    -d	Work on already-downloaded test data only (suitable for debugging).
    -v	Be verbose.
    -f  [file] Specify path to config file.
    -n  Testing only: show what clone/pull/mkdir operations would happen.
    -m  Print man page
    -h	Brief help message

landle requires a configuration file (C<.landlerc>) before it will work;
see CONFIGURATION for details.

=head1 DESCRIPTION

landle is a Small but Useful(tm) utility to clone your github repos:
those you watch, own or star.  It's a straight-up ripoff of
L<ghsync|https://github.com/kennethreitz/ghsync>. ghsync is a great
idea, but I couldn't get it to work for me...so here's landle.

It'll organize your repos like so:

    + repos
    `--- forks    (public fork repos)
    `--- mirrors  (public mirror repos)
    `--- private  (private repos)
    `--- public   (public repos)
    `--- watching (public watched repos)

(Again, straight from ghsync.  All hail the original author!)

=head1 CONFIGURATION

landle requires a configuration file before it will work.  A minimal config
looks like this:

    [landle]
    user = saintaardvark
    repodir = /home/aardvark/landle
    # Path to script to run after cloning a new repo -- OPTIONAL
    post-clone-hook = /home/aardvark/src/landle/post-clone-example.sh

The config file is INI-style.  The C<[landle]> section is required, as
is the C<user> and C<repodir> directive.  C<post-clone-hook> is
optional; see the HOOKS section for details Comments are marked with
C<#> and must be on their own line.  Unknown directives are ignored.

landle will look for its config file in these places, in this order:

=over

=item C<.landlerc> in the directory it's run from (which allows for per-repo configs)

=item C<~/.landlerc> (per-user config)

=item or as specified with the "-f" option (global!)

=back

=head1 USE

Once you've created a config file, just run C<landle>.  It'll download
the info it needs from Github, create the directories under C<repodir>,
and clone or pull as necessary.  If the optional C<post-clone-hook>
setting is present, it's assumed to be the path to a script or some
such; landle will run it after cloning a new repo, and within that
repo directory.

(Note that landle is meant to maintain more-or-less read-only mirrors.
It'd be interesting to think about a pre-update hook or some such
that'd push any commits -- a sort of automated
let's-push-all-the-commits-I-made-on-the-airplane mode -- but that
gets more complicated than I want to think about.)

=head1 HOOKS

landle has an option to run a program after cloning a new repo; this
is configured by the C<post-clone-hook> directive.  The program will
be run within the newly-cloned repo directory.  An example use might
be to set C<user.name> and C<user.email> in each repo:

    #!/bin/sh

    git config user.name="Hugh Brown (Saint Aardvark the Carpeted)"
    git config user.email="spam@saintaardvarkthecarpeted.com"

=head1 TEST DATA

If you want test data for the C<-d> option , fetch it like so:

    wget https://api.github.com/users/[username]/starred -O user.starred.json
    wget https://api.github.com/users/[username]/repos -O user.repos.json

landle will look for these files in the directory it's invoked from.
This will keep it from hitting Github every time you run, and you can
get some debugging done.

=head1 BUGS

Some repos appear to get "stuck": landle reports unmerged files, even
though I haven't edited anything, changed the repo, etc.  I'm not sure
yet what's going on, but C<git reset --hard HEAD; git pull> seems to
get around the problem.

When cloning a new repo, landle reports an error though everything's
actually fine.  I need to figure out what's going on there...

Report any others to me via the L<Github project
page|https://github.com/saintaardvark/landle>.

See the C<README.md> file for a description of Landle's shortcomings
and my TODO list.

=head1 REQUIREMENTS

Well, a Github account...

landle is written in Perl, and uses the following non-base modules:

=over

=item Config::Simple

=item JSON::XS

=item File::Homedir

=item Git::Wrapper

=back

=head1 LICENSE

landle is copyright (C) 2014 by the author.  It is licensed under the
GPL, version 3.  This program comes with ABSOLUTELY NO WARRANTY.  This
is free software, and you are welcome to redistribute it under certain
conditions; see the LICENSE file for details.

=head1 THANKS

=over

=item L<ghsync|https://github.com/kennethreitz/ghsync>

=item The L<Random Javascript Project Name Generator|http://mrsharpoblunto.github.io/foswig.js/> for the name "landle"

=back

=head1 HOME PAGE

=over

=item L<Github page|https://github.com/saintaardvark/landle>

=item L<Home|http://git.saintaardvarkthecarpeted.com/?p=landle.git;a=summary>

=back

=head1 AUTHOR

Hugh Brown (Saint Aardvark the Carpeted) <aardvark ta saintaardvarkthecarpeted.com>
